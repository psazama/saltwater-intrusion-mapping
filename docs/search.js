window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "swmaps", "modulename": "swmaps", "kind": "module", "doc": "<p>Core utilities for mapping saltwater intrusion.</p>\n"}, {"fullname": "swmaps.config", "modulename": "swmaps.config", "kind": "module", "doc": "<p>Configuration helpers for locating project data directories.</p>\n"}, {"fullname": "swmaps.config.Settings", "modulename": "swmaps.config", "qualname": "Settings", "kind": "class", "doc": "<p>Application settings loaded from environment variables.</p>\n\n<p>Parameters:\n    None</p>\n\n<p>Attributes:\n    data_root (Path): Root directory for persistent data artifacts.</p>\n", "bases": "pydantic_settings.main.BaseSettings"}, {"fullname": "swmaps.config.Settings.data_root", "modulename": "swmaps.config", "qualname": "Settings.data_root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path"}, {"fullname": "swmaps.config.Settings.Config", "modulename": "swmaps.config", "qualname": "Settings.Config", "kind": "class", "doc": "<p>Pydantic metadata configuring the <code>SW_</code> environment variable prefix.</p>\n\n<p>Parameters:\n    None</p>\n\n<p>Attributes:\n    env_prefix (str): Prefix applied to environment variables.</p>\n"}, {"fullname": "swmaps.config.Settings.Config.env_prefix", "modulename": "swmaps.config", "qualname": "Settings.Config.env_prefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;SW_&#x27;"}, {"fullname": "swmaps.config.Settings.model_config", "modulename": "swmaps.config", "qualname": "Settings.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic_settings.main.SettingsConfigDict]", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;, &#x27;arbitrary_types_allowed&#x27;: True, &#x27;validate_default&#x27;: True, &#x27;case_sensitive&#x27;: False, &#x27;env_prefix&#x27;: &#x27;SW_&#x27;, &#x27;nested_model_default_partial_update&#x27;: False, &#x27;env_file&#x27;: None, &#x27;env_file_encoding&#x27;: None, &#x27;env_ignore_empty&#x27;: False, &#x27;env_nested_delimiter&#x27;: None, &#x27;env_nested_max_split&#x27;: None, &#x27;env_parse_none_str&#x27;: None, &#x27;env_parse_enums&#x27;: None, &#x27;cli_prog_name&#x27;: None, &#x27;cli_parse_args&#x27;: None, &#x27;cli_parse_none_str&#x27;: None, &#x27;cli_hide_none_type&#x27;: False, &#x27;cli_avoid_json&#x27;: False, &#x27;cli_enforce_required&#x27;: False, &#x27;cli_use_class_docs_for_groups&#x27;: False, &#x27;cli_exit_on_error&#x27;: True, &#x27;cli_prefix&#x27;: &#x27;&#x27;, &#x27;cli_flag_prefix_char&#x27;: &#x27;-&#x27;, &#x27;cli_implicit_flags&#x27;: False, &#x27;cli_ignore_unknown_args&#x27;: False, &#x27;cli_kebab_case&#x27;: False, &#x27;cli_shortcuts&#x27;: None, &#x27;json_file&#x27;: None, &#x27;json_file_encoding&#x27;: None, &#x27;yaml_file&#x27;: None, &#x27;yaml_file_encoding&#x27;: None, &#x27;yaml_config_section&#x27;: None, &#x27;toml_file&#x27;: None, &#x27;secrets_dir&#x27;: None, &#x27;protected_namespaces&#x27;: (&#x27;model_validate&#x27;, &#x27;model_dump&#x27;, &#x27;settings_customise_sources&#x27;), &#x27;enable_decoding&#x27;: True}"}, {"fullname": "swmaps.config.get_settings", "modulename": "swmaps.config", "qualname": "get_settings", "kind": "function", "doc": "<p>Return a fresh <code>Settings</code> instance using current environment values.</p>\n\n<p>Args:\n    None</p>\n\n<p>Returns:\n    Settings: Settings object populated from environment variables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">swmaps</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Settings</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.config.settings", "modulename": "swmaps.config", "qualname": "settings", "kind": "variable", "doc": "<p></p>\n", "default_value": "Settings(data_root=PosixPath(&#x27;/mnt/disks/data-disk/saltwater-intrusion-mapping/swmaps/data&#x27;))"}, {"fullname": "swmaps.config.data_path", "modulename": "swmaps.config", "qualname": "data_path", "kind": "function", "doc": "<p>Convenience for building paths inside the <code>data_root</code>.</p>\n\n<p>Args:\n    *parts (str | os.PathLike): Path components joined relative to\n        <code>Settings.data_root</code>.</p>\n\n<p>Returns:\n    Path: Absolute path inside the configured data root.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">parts</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core", "modulename": "swmaps.core", "kind": "module", "doc": "<p>Core computational utilities for saltwater intrusion mapping.</p>\n"}, {"fullname": "swmaps.core.aoi", "modulename": "swmaps.core.aoi", "kind": "module", "doc": "<p>Area-of-interest helpers for working with bounding boxes and patches.</p>\n"}, {"fullname": "swmaps.core.aoi.to_polygon", "modulename": "swmaps.core.aoi", "qualname": "to_polygon", "kind": "function", "doc": "<p>Normalize an AOI specification into a Shapely geometry.</p>\n\n<p>Args:\n    aoi (Sequence[float] | Polygon | MultiPolygon): Either a bounding\n        box as <code>(minx, miny, maxx, maxy)</code> or an existing Shapely\n        polygon/multipolygon expressed in EPSG:4326.</p>\n\n<p>Returns:\n    Polygon | MultiPolygon: A geometry representing the AOI in\n    EPSG:4326 coordinates.</p>\n\n<p>Raises:\n    ValueError: If <code>aoi</code> cannot be interpreted as a bounding box or\n        geometry.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">aoi</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">multipolygon</span><span class=\"o\">.</span><span class=\"n\">MultiPolygon</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">Polygon</span> <span class=\"o\">|</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">multipolygon</span><span class=\"o\">.</span><span class=\"n\">MultiPolygon</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.aoi.iter_square_patches", "modulename": "swmaps.core.aoi", "qualname": "iter_square_patches", "kind": "function", "doc": "<p>Yield square patches that cover the AOI in the requested CRS.</p>\n\n<p>Args:\n    aoi (Sequence[float] | Polygon | MultiPolygon): The AOI definition\n        accepted by <code>to_polygon()</code>.\n    patch_size_m (float): The edge length of the patches expressed in\n        meters.\n    metric_crs (str): Projected CRS used to build the grid of square\n        patches.</p>\n\n<p>Yields:\n    Polygon: Square polygons in <code>metric_crs</code> that intersect the AOI.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">aoi</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">multipolygon</span><span class=\"o\">.</span><span class=\"n\">MultiPolygon</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">patch_size_m</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">metric_crs</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;EPSG:32618&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.coastline", "modulename": "swmaps.core.coastline", "kind": "module", "doc": "<p>Utilities for downloading coastline data and building buffered coastal bands.</p>\n"}, {"fullname": "swmaps.core.coastline.download_coastal_poly", "modulename": "swmaps.core.coastline", "qualname": "download_coastal_poly", "kind": "function", "doc": "<p>Download the Natural Earth coastline shapefile to the local data directory.</p>\n\n<p>Args:\n    None</p>\n\n<p>Returns:\n    None: Coastline files are written to <code>config/coastline</code>; the function\n    has no in-memory output.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.coastline.create_coastal_poly", "modulename": "swmaps.core.coastline", "qualname": "create_coastal_poly", "kind": "function", "doc": "<p>Build and persist a buffered coastal band clipped to the project AOI.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>bounding_box_file : str | Path\n    Vector file containing the larger bounding box (GeoJSON, Shapefile, etc.).\nout_file : str | Path | None\n    Destination for the generated band. Defaults to <code>config/coastal_band.gpkg</code>.\nbuf_km, offshore_km : float\n    Width of inland and offshore buffers in kilometres\u2014mirroring the inline\n    comments that explain why we widen the coastline before clipping.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>gpd.GeoDataFrame\n    GeoDataFrame with a single polygon feature in EPSG:4326 coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bounding_box_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">out_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">buf_km</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">offshore_km</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.download_helpers", "modulename": "swmaps.core.download_helpers", "kind": "module", "doc": "<p>Support routines for downloading and storing ancillary raster products.</p>\n"}, {"fullname": "swmaps.core.indices", "modulename": "swmaps.core.indices", "kind": "module", "doc": "<p>Spectral index utilities used to derive water masks from imagery.</p>\n"}, {"fullname": "swmaps.core.indices.compute_ndwi", "modulename": "swmaps.core.indices", "qualname": "compute_ndwi", "kind": "function", "doc": "<p>Compute the Normalized Difference Water Index (NDWI) mask.</p>\n\n<p>Args:\n    path (str | Path): Path to the source GeoTIFF file containing\n        multispectral imagery.\n    mission (str): Mission identifier, e.g. <code>\"landsat-5\"</code>,\n        <code>\"landsat-7\"</code>, or <code>\"sentinel-2\"</code>.\n    out_path (str | Path | None): Optional path where the NDWI raster\n        should be written.\n    display (bool): If <code>True</code>, render the NDWI mask using Matplotlib.\n    threshold (float): Threshold applied to the NDWI ratio to classify\n        water pixels.\n    center_size (int | None): If provided, limit the computation to a\n        centered square window with the specified edge length (pixels).</p>\n\n<p>Returns:\n    np.ndarray: Binary NDWI mask where water pixels equal <code>1</code> and\n    other pixels equal <code>0</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">mission</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">display</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">center_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.missions", "modulename": "swmaps.core.missions", "kind": "module", "doc": "<p>Mission configuration helpers for Landsat and Sentinel sensors.</p>\n"}, {"fullname": "swmaps.core.missions.get_mission", "modulename": "swmaps.core.missions", "qualname": "get_mission", "kind": "function", "doc": "<p>Return metadata describing the requested satellite mission.</p>\n\n<p>Args:\n    mission (str): Mission slug such as <code>\"sentinel-2\"</code> or\n        <code>\"landsat-5\"</code>.</p>\n\n<p>Returns:\n    dict[str, object]: Dictionary containing band mappings, band indices,\n    collection identifiers, query filters, resolution, and valid date\n    range.</p>\n\n<p>Raises:\n    ValueError: If the mission slug is not recognised.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mission</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.mosaic", "modulename": "swmaps.core.mosaic", "kind": "module", "doc": "<p>Utilities for building multi-band mosaics from STAC imagery downloads.</p>\n"}, {"fullname": "swmaps.core.mosaic.create_mosaic_placeholder", "modulename": "swmaps.core.mosaic", "qualname": "create_mosaic_placeholder", "kind": "function", "doc": "<p>Create an empty mosaic GeoTIFF file to be filled later.</p>\n\n<p>Args:\n    mosaic_path (str | Path): Path where the placeholder file will be\n        saved.\n    bbox (tuple[float, float, float, float]): Bounding box expressed as\n        <code>(minx, miny, maxx, maxy)</code> in the target CRS.\n    mission (str): Satellite mission slug used to determine band count.\n    resolution (float): Target pixel resolution in metres.\n    crs (str): Coordinate reference system for the mosaic.\n    dtype (str): Data type to allocate for the raster bands.</p>\n\n<p>Returns:\n    tuple[Affine, int, int, str | CRS, int]: The raster transform, width,\n    height, CRS, and number of bands for the mosaic.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mosaic_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">bbox</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">mission</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">crs</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;EPSG:32618&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;float32&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.mosaic.add_image_to_mosaic", "modulename": "swmaps.core.mosaic", "qualname": "add_image_to_mosaic", "kind": "function", "doc": "<p>Reproject and insert a satellite image array into the mosaic placeholder.</p>\n\n<p>Args:\n    band_index (int): One-based band index within the mosaic.\n    image_data (np.ndarray): Image array to reproject and merge.\n    src_transform (Affine): Affine transform of the source image.\n    src_crs (str | CRS): Coordinate reference system of the source image.\n    mosaic_path (str | Path): Path to the mosaic file being updated.</p>\n\n<p>Returns:\n    None: The mosaic file is updated in place.</p>\n\n<p>Raises:\n    ValueError: If <code>band_index</code> exceeds the number of bands in the\n        mosaic file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">band_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">image_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">src_transform</span><span class=\"p\">:</span> <span class=\"n\">affine</span><span class=\"o\">.</span><span class=\"n\">Affine</span>,</span><span class=\"param\">\t<span class=\"n\">src_crs</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">crs</span><span class=\"o\">.</span><span class=\"n\">CRS</span>,</span><span class=\"param\">\t<span class=\"n\">mosaic_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.mosaic.compress_mosaic", "modulename": "swmaps.core.mosaic", "qualname": "compress_mosaic", "kind": "function", "doc": "<p>Rewrite the mosaic file with compression to reduce disk usage.</p>\n\n<p>Args:\n    mosaic_path (str | Path): Path to the mosaic GeoTIFF to compress.</p>\n\n<p>Returns:\n    None: The file on disk is replaced with a compressed copy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mosaic_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.mosaic.patchwise_query_download_mosaic", "modulename": "swmaps.core.mosaic", "qualname": "patchwise_query_download_mosaic", "kind": "function", "doc": "<p>Download, mosaic, and optionally persist imagery patch by patch.</p>\n\n<p>Args:\n    mosaic_path (str | Path): Path to the mosaic GeoTIFF that will be\n        created or updated.\n    bbox (Sequence[float] | Polygon | MultiPolygon | gpd.GeoDataFrame |\n        gpd.GeoSeries): AOI definition used to generate patches.\n    mission (str): Mission slug controlling band configuration and query\n        filters.\n    resolution (float): Target output pixel resolution in metres.\n    bands (dict[str, str]): Mapping of band aliases to STAC asset keys.\n    date_range (str): Date range string to filter imagery.\n    base_output_path (str | Path): Directory where optional exports are\n        saved when <code>to_disk</code> is <code>True</code>.\n    to_disk (bool): If <code>True</code>, persist each patch stack alongside the\n        mosaic.\n    patch_size_meters (float | None): Optional override for the patch\n        edge length in metres. Defaults to a multiple of <code>resolution</code>.\n    multithreaded (bool): If <code>True</code>, process patches in parallel using\n        a process pool.\n    max_items (int): Maximum number of STAC items requested per patch.</p>\n\n<p>Returns:\n    dict: Summary metadata describing the download session.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mosaic_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">bbox</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">multipolygon</span><span class=\"o\">.</span><span class=\"n\">MultiPolygon</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geoseries</span><span class=\"o\">.</span><span class=\"n\">GeoSeries</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">mission</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">bands</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">date_range</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">base_output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">to_disk</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">patch_size_meters</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">multithreaded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_items</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.mosaic.should_skip_mosaic", "modulename": "swmaps.core.mosaic", "qualname": "should_skip_mosaic", "kind": "function", "doc": "<p>Determine whether mosaic processing should be skipped for a date.</p>\n\n<p>Args:\n    path (str | Path): Path to the mosaic file that would be created.\n    mission_config (dict): Mission configuration returned by\n        <code>get_mission()</code>.\n    date_str (str): Date string in <code>YYYY-MM-DD</code> or date-range form.\n    threshold (float): Maximum acceptable NaN ratio for existing mosaics.</p>\n\n<p>Returns:\n    bool: <code>True</code> when processing should be skipped, <code>False</code> otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">mission_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">date_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.mosaic.process_date", "modulename": "swmaps.core.mosaic", "qualname": "process_date", "kind": "function", "doc": "<p>Process imagery for a single date across multiple missions.</p>\n\n<p>Args:\n    date (str): Date or date range (<code>YYYY-MM-DD</code> or\n        <code>YYYY-MM-DD/YYYY-MM-DD</code>).\n    bbox (Sequence[float] | Polygon | MultiPolygon | gpd.GeoDataFrame |\n        gpd.GeoSeries): AOI definition in WGS84 coordinates.\n    sentinel_mission (dict): Sentinel-2 mission metadata from\n        <code>get_mission()</code>.\n    landsat5_mission (dict): Landsat-5 mission metadata from\n        <code>get_mission()</code>.\n    landsat7_mission (dict): Landsat-7 mission metadata from\n        <code>get_mission()</code>.\n    sentinel2_mosaic_path (str | Path): Base directory for Sentinel-2\n        mosaics.\n    landsat5_mosaic_path (str | Path): Base directory for Landsat-5\n        mosaics.\n    landsat7_mosaic_path (str | Path): Base directory for Landsat-7\n        mosaics.\n    inline_mask (bool): If <code>True</code>, write NDWI masks next to each\n        completed mosaic and optionally delete the mosaic afterwards.\n    multithreaded (bool): If <code>True</code>, process patches in parallel.\n    max_items (int): Maximum STAC items requested per patch.</p>\n\n<p>Returns:\n    dict: Dictionary containing the processed date and any captured\n    errors.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bbox</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">multipolygon</span><span class=\"o\">.</span><span class=\"n\">MultiPolygon</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">,</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geoseries</span><span class=\"o\">.</span><span class=\"n\">GeoSeries</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sentinel_mission</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">landsat5_mission</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">landsat7_mission</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">sentinel2_mosaic_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">landsat5_mosaic_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">landsat7_mosaic_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">inline_mask</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">multithreaded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_items</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.nlcd_cdl", "modulename": "swmaps.core.nlcd_cdl", "kind": "module", "doc": "<p>Utilities for downloading NLCD and CDL land-cover products.</p>\n"}, {"fullname": "swmaps.core.nlcd_cdl.validate_nlcd_year", "modulename": "swmaps.core.nlcd_cdl", "qualname": "validate_nlcd_year", "kind": "function", "doc": "<p>Check if the requested NLCD year is available.</p>\n\n<p>Args:\n    given_year (int): Desired NLCD land-cover year.</p>\n\n<p>Returns:\n    tuple[int | None, str | None]: The closest available year and the\n    identifier of the coverage offering, or <code>(None, None)</code> when no\n    coverage is found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">given_year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.nlcd_cdl.download_nlcd", "modulename": "swmaps.core.nlcd_cdl", "qualname": "download_nlcd", "kind": "function", "doc": "<p>Download the annual NLCD land-cover product for the requested year.</p>\n\n<p>Args:\n    region (Sequence[float] | Polygon | MultiPolygon): AOI specified as a\n        bounding box in WGS84 or a Shapely geometry.\n    year (int): Target NLCD year.\n    output_path (Union[str, Path] | None): Optional destination path for\n        the GeoTIFF.\n    overwrite (bool): Currently unused placeholder for API compatibility.\n    allow_closest (bool): If <code>True</code>, download the nearest available\n        year when the exact one is missing.</p>\n\n<p>Returns:\n    Path | None: Path to the downloaded raster or <code>None</code> if the product\n    is unavailable and <code>allow_closest</code> is <code>False</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">multipolygon</span><span class=\"o\">.</span><span class=\"n\">MultiPolygon</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">allow_closest</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.nlcd_cdl.download_nass_cdl", "modulename": "swmaps.core.nlcd_cdl", "qualname": "download_nass_cdl", "kind": "function", "doc": "<p>Download the USDA NASS Cropland Data Layer for the provided region.</p>\n\n<p>Args:\n    region (Sequence[float] | Polygon | MultiPolygon): AOI in WGS84\n        coordinates.\n    year (int): Target CDL year.\n    output_path (Union[str, Path] | None): Optional destination path.\n    overwrite (bool): Placeholder argument for compatibility.</p>\n\n<p>Returns:\n    Path | None: Path to the downloaded CDL raster, or <code>None</code> if the\n    download fails.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">multipolygon</span><span class=\"o\">.</span><span class=\"n\">MultiPolygon</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.raster_utils", "modulename": "swmaps.core.raster_utils", "kind": "module", "doc": "<p>Raster utility helpers for reprojection, resampling, and diagnostics.</p>\n"}, {"fullname": "swmaps.core.raster_utils.warp_to_wgs84", "modulename": "swmaps.core.raster_utils", "qualname": "warp_to_wgs84", "kind": "function", "doc": "<p>Reproject a raster to WGS\u201184 (EPSG:4326) for web\u2011map visualisation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>src_path : str\n    Path to the input GeoTIFF (any projected or geographic CRS).\ndst_path : str, optional\n    Path for the re\u2011projected output. If <em>None</em> (default) the function\n    appends <code>_wgs84</code> to <em>src_path</em> before the file extension.\nresampling : rasterio.enums.Resampling, optional\n    Resampling algorithm (default: <code>Resampling.nearest</code>).\ndst_nodata : float, optional\n    Nodata value written to the output (default: <code>numpy.nan</code>).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>str\n    Path to the generated WGS\u201184 GeoTIFF.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dst_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resampling</span><span class=\"p\">:</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Resampling</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Resampling</span><span class=\"o\">.</span><span class=\"n\">nearest</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">dst_nodata</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.raster_utils.downsample_to_landsat", "modulename": "swmaps.core.raster_utils", "qualname": "downsample_to_landsat", "kind": "function", "doc": "<p>Resample a raster array to Landsat-like 30 metre resolution.</p>\n\n<p>Args:\n    data (np.ndarray): Source array to resample.\n    transform (Affine): Affine transform describing the source grid.\n    crs: Coordinate reference system associated with <code>data</code>.\n    target_resolution (float): Desired output pixel size in metres.\n    resampling (Resampling): Resampling algorithm to use.</p>\n\n<p>Returns:\n    tuple[np.ndarray, Affine]: The resampled array and its affine\n    transform.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">affine</span><span class=\"o\">.</span><span class=\"n\">Affine</span>,</span><span class=\"param\">\t<span class=\"n\">crs</span>,</span><span class=\"param\">\t<span class=\"n\">target_resolution</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">resampling</span><span class=\"p\">:</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Resampling</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Resampling</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.raster_utils.init_logger", "modulename": "swmaps.core.raster_utils", "qualname": "init_logger", "kind": "function", "doc": "<p>Configure a process-aware logger that writes to disk and stdout.</p>\n\n<p>Args:\n    log_path (str): File path where log messages will be appended.</p>\n\n<p>Returns:\n    None: Logging is configured as a side effect.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;process_log.txt&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.raster_utils.find_non_nan_window", "modulename": "swmaps.core.raster_utils", "qualname": "find_non_nan_window", "kind": "function", "doc": "<p>Find a mostly valid window within a raster dataset.</p>\n\n<p>Args:\n    tif_path (str): Path to the raster file to inspect.\n    bands (list[int] | None): One-based band indices to read. When\n        <code>None</code>, only band 1 is evaluated.\n    window_size (int): Edge length of the candidate window in pixels.\n    stride (int): Step size used while scanning the raster.\n    threshold_ratio (float): Minimum fraction of valid pixels required\n        within a window.</p>\n\n<p>Returns:\n    tuple[np.ndarray | list[np.ndarray], dict, Window] | None: Tuple\n    containing the extracted data array(s), an updated raster profile,\n    and the chosen window, or <code>None</code> if no valid window is found.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tif_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bands</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">window_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">256</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_ratio</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">Window</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.raster_utils.reproject_bbox", "modulename": "swmaps.core.raster_utils", "qualname": "reproject_bbox", "kind": "function", "doc": "<p>Project a bounding box or geometry from one CRS into another.</p>\n\n<p>Args:\n    bbox (sequence | GeoDataFrame | GeoSeries | Polygon | MultiPolygon):\n        Input bounds or geometry expressed in <code>src_crs</code> coordinates.\n    src_crs (str): Coordinate reference system describing <code>bbox</code>.\n    dst_crs (str): Target coordinate reference system for the output bounds.</p>\n\n<p>Returns:\n    list[float]: Reprojected bounding box <code>[minx, miny, maxx, maxy]</code> in\n    <code>dst_crs</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bbox</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span> <span class=\"o\">|</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geoseries</span><span class=\"o\">.</span><span class=\"n\">GeoSeries</span> <span class=\"o\">|</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">Polygon</span> <span class=\"o\">|</span> <span class=\"n\">shapely</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">multipolygon</span><span class=\"o\">.</span><span class=\"n\">MultiPolygon</span>,</span><span class=\"param\">\t<span class=\"n\">src_crs</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;EPSG:4326&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dst_crs</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;EPSG:32618&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.salinity", "modulename": "swmaps.core.salinity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "swmaps.core.salinity.heuristic", "modulename": "swmaps.core.salinity.heuristic", "kind": "module", "doc": "<p>Heuristic baseline for salinity classification from multispectral imagery.</p>\n\n<p>Implements an index-based approach combining NDWI, MNDWI, turbidity,\nchlorophyll, and SWIR proxies. Returns both continuous scores and\ncategorical class maps.</p>\n"}, {"fullname": "swmaps.core.salinity.heuristic.estimate_salinity_level", "modulename": "swmaps.core.salinity.heuristic", "qualname": "estimate_salinity_level", "kind": "function", "doc": "<p>Estimate water salinity categories from multispectral bands.</p>\n\n<p>The heuristic combines the remote sensing proxies commonly cited for\ndifferentiating freshwater from saline or hypersaline water bodies:</p>\n\n<ul>\n<li>Water detection from NDWI/MNDWI (green vs. NIR/SWIR)</li>\n<li>Turbidity and Normalised Difference Turbidity Index (red vs. green/blue)</li>\n<li>Chlorophyll proxies (green vs. blue)</li>\n<li>Salinity proxy index from short-wave infrared reflectance (SWIR1/2)</li>\n<li>Vegetation stress indicator via NDVI around the water pixel</li>\n</ul>\n\n<p>Inputs are expected to be surface reflectance bands from Sentinel-2, Landsat,\nor similar sensors. When the data are scaled (e.g., Sentinel-2 L2A stored as\nintegers 0\u201310,000), <code>reflectance_scale</code> rescales the input into the\n0\u20131 range before the indices are computed.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>blue, green, red, nir, swir1, swir2:\n    Arrays representing the corresponding spectral bands. All arrays must\n    share the same shape.\nreflectance_scale:\n    If provided, each band is divided by this value to convert to\n    reflectance. Set to <code>None</code> to skip rescaling.\nwater_threshold:\n    Threshold applied to NDWI/MNDWI to declare a pixel water-covered.\nsalinity_proxy_scale:\n    Normalising constant for the SWIR salinity proxy <code>swir1 + swir2</code>.\nsalinity_proxy_threshold:\n    Pixels with a normalised salinity proxy above this value are also\n    considered water (useful for bright saline pans with low NDWI).\nchlorophyll_reference:\n    Reference ratio for the chlorophyll proxy. Values above this reference\n    are treated as healthy (low salinity), whereas lower values indicate a\n    potential salinity signal.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    <code>{\"score\", \"class_map\", \"water_mask\", \"indices\"}</code> where</p>\n\n<pre><code>- ``score`` is a float32 array (0\u20131) salinity intensity estimate with\n  NaNs where water is not detected.\n- ``class_map`` is a string array with labels ``{\"land\", \"fresh\",\n  \"brackish\", \"saline\"}``.\n- ``water_mask`` is a boolean array marking detected water pixels.\n- ``indices`` is a dictionary of the intermediate proxies used in the\n  computation for transparency/debugging.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">blue</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">green</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">red</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">nir</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">swir1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">swir2</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">reflectance_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mf\">10000.0</span>,</span><span class=\"param\">\t<span class=\"n\">water_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">salinity_proxy_scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.2</span>,</span><span class=\"param\">\t<span class=\"n\">salinity_proxy_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.35</span>,</span><span class=\"param\">\t<span class=\"n\">chlorophyll_reference</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.salinity.utils", "modulename": "swmaps.core.salinity.utils", "kind": "module", "doc": "<p>Analytical helpers for deriving water salinity products from imagery.</p>\n"}, {"fullname": "swmaps.core.salinity.utils.download_salinity_datasets", "modulename": "swmaps.core.salinity.utils", "qualname": "download_salinity_datasets", "kind": "function", "doc": "<p>Download CODC salinity NetCDF files listed in a text file.</p>\n\n<p>Args:\n    listing_file (str | Path): Text file with one filename per line.\n        Lines starting with '#' or blank lines are ignored.\n    destination (str | Path): Directory to save downloaded files.\n    base_url (str): Base URL hosting the CODC NetCDF files.</p>\n\n<p>Returns:\n    list[Path]: Paths to the downloaded (or existing) files.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">listing_file</span>,</span><span class=\"param\">\t<span class=\"n\">destination</span><span class=\"o\">=</span><span class=\"s1\">&#39;salinity_labels/codc&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">&#39;http://www.ocean.iap.ac.cn/ftp/cheng/CODCv2.1_Insitu_T_S_database/nc/&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.salinity.utils.build_salinity_truth", "modulename": "swmaps.core.salinity.utils", "qualname": "build_salinity_truth", "kind": "function", "doc": "<p>Extract near-surface salinity observations into a flat CSV dataset.\nData source:\nZhang, B., Cheng, L., Tan, Z. et al.\nCODC-v1: a quality-controlled and bias-corrected ocean temperature profile database from 1940\u20132023.\n<a href=\"http://www.ocean.iap.ac.cn/ftp/cheng/CODCv2.1_Insitu_T_S_database/\">http://www.ocean.iap.ac.cn/ftp/cheng/CODCv2.1_Insitu_T_S_database/</a></p>\n\n<p>Args:\n    dataset_files (Sequence[str | Path] | None): Collection of NetCDF\n        profile files. If <code>None</code>, use the default sample dataset.\n    output_csv (str | Path | None): Destination for the combined CSV.\n    depth (float): Maximum sampling depth (metres) considered near\n        surface.\n    prof_limit (int | None): Optional limit on the number of profiles to\n        process from each file.</p>\n\n<p>Returns:\n    None: Data are written to <code>output_csv</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset_files</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_csv</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">prof_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.salinity.utils.load_salinity_truth", "modulename": "swmaps.core.salinity.utils", "qualname": "load_salinity_truth", "kind": "function", "doc": "<p>Load the prepared salinity truth table from disk and drop missing rows.</p>\n\n<p>Args:\n    truth_file (str | Path | None): Path to the CSV generated by\n        <code>build_salinity_truth()</code>.</p>\n\n<p>Returns:\n    pandas.DataFrame: Cleaned truth table without missing values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">truth_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.salinity.utils.process_salinity_features_chunk", "modulename": "swmaps.core.salinity.utils", "qualname": "process_salinity_features_chunk", "kind": "function", "doc": "<p>Compute salinity features and water mask for a window.</p>\n\n<p>Args:\n    src (rasterio.io.DatasetReader): Open raster mosaic reader.\n    win (Window): Window describing the area to read.\n    band_index (dict[str, int]): Mapping of spectral band names to\n        raster band numbers.\n    src_lbl (rasterio.io.DatasetReader | None): Optional label raster\n        reader.\n    dst_y (rasterio.io.DatasetWriter | None): Optional label writer for\n        water-masked salinity values.\n    dst_y_win (Window | None): Window in the destination label raster.\n    water_threshold (float): NDWI threshold distinguishing water pixels.\n    profile (dict | None): Optional raster profile override.</p>\n\n<p>Returns:\n    tuple[np.ndarray, np.ndarray]: Feature stack and water mask arrays for\n    the specified window.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">DatasetReader</span>,</span><span class=\"param\">\t<span class=\"n\">win</span><span class=\"p\">:</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">Window</span>,</span><span class=\"param\">\t<span class=\"n\">band_index</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">src_lbl</span><span class=\"p\">:</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">DatasetReader</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dst_y</span><span class=\"p\">:</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">DatasetWriter</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dst_y_win</span><span class=\"p\">:</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">windows</span><span class=\"o\">.</span><span class=\"n\">Window</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">water_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">profile</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.salinity.utils.extract_salinity_features_from_mosaic", "modulename": "swmaps.core.salinity.utils", "qualname": "extract_salinity_features_from_mosaic", "kind": "function", "doc": "<p>Extract features across a mosaic and persist arrays to disk.</p>\n\n<p>Args:\n    mosaic_path (str | Path): Path to the input multispectral GeoTIFF.\n    mission_band_index (dict[str, int]): Band index mapping for the\n        mission.\n    output_feature_path (str | Path): Path for the multi-band feature\n        GeoTIFF.\n    output_mask_path (str | Path): Path for the single-band water mask.\n    label_path (str | Path | None): Optional salinity label raster to\n        sample.\n    output_label_path (str | Path | None): Optional destination for the\n        masked label raster.\n    chunk_size (int): Window size used when iterating over the mosaic.\n    water_threshold (float): NDWI threshold distinguishing water pixels.</p>\n\n<p>Returns:\n    None: Outputs are written to disk.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mosaic_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">mission_band_index</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">output_feature_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">output_mask_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">label_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_label_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>,</span><span class=\"param\">\t<span class=\"n\">water_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.salinity.xgboost_model", "modulename": "swmaps.core.salinity.xgboost_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "swmaps.core.salinity.xgboost_model.train_salinity_deng", "modulename": "swmaps.core.salinity.xgboost_model", "qualname": "train_salinity_deng", "kind": "function", "doc": "<p>Train an XGBoost regressor on salinity feature data.</p>\n\n<p>Based on Deng et al. (2024), \"Monitoring Salinity in Inner Mongolian Lakes\nBased on Sentinel-2 Images and Machine Learning\".</p>\n\n<p>Args:\n    X (np.ndarray): Feature matrix shaped <code>(n_samples, n_features)</code>.\n    y (np.ndarray): Target salinity values.\n    test_size (float): Fraction of data reserved for testing.\n    random_state (int): Random seed for splitting and model initialisation.\n    save_model_path (str | Path | None): Optional path where the trained\n        model is saved in <code>.joblib</code> format.</p>\n\n<p>Returns:\n    tuple[xgb.XGBRegressor, dict[str, float]]: Trained model and a metric\n    dictionary containing RMSE and R\u00b2 scores.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">test_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">save_model_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">xgboost</span><span class=\"o\">.</span><span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">XGBRegressor</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.satellite_query", "modulename": "swmaps.core.satellite_query", "kind": "module", "doc": "<p>Helpers for querying STAC catalogs and downloading satellite imagery.</p>\n"}, {"fullname": "swmaps.core.satellite_query.query_satellite_items", "modulename": "swmaps.core.satellite_query", "qualname": "query_satellite_items", "kind": "function", "doc": "<p>Query the AWS Earth Search STAC API for imagery matching the criteria.</p>\n\n<p>Args:\n    mission (str): Mission slug understood by <code>get_mission()</code>.\n    bbox (list[float] | None): Bounding box <code>[minx, miny, maxx, maxy]</code>\n        in WGS84 coordinates.\n    date_range (str | None): ISO-8601 date or range string.\n    max_items (int | None): Maximum number of STAC items to fetch.\n    debug (bool): If <code>True</code>, print identifiers for the retrieved items.</p>\n\n<p>Returns:\n    tuple[list[pystac.Item], dict[str, str]]: Matching STAC items and the\n    band mapping for the mission.</p>\n\n<p>Raises:\n    ValueError: When no matching items are found.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mission</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;sentinel-2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bbox</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">date_range</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_items</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">pystac</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">Item</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.satellite_query.download_satellite_bands_from_item", "modulename": "swmaps.core.satellite_query", "qualname": "download_satellite_bands_from_item", "kind": "function", "doc": "<p>Download selected bands for a STAC item.</p>\n\n<p>Args:\n    item (pystac.Item): STAC item describing the asset locations.\n    bands (dict[str, str]): Mapping of STAC asset keys to file suffixes.\n    to_disk (bool): When <code>True</code>, persist downloaded bands to <code>data_dir</code>.\n    data_dir (str | Path | None): Directory for saved rasters.\n    debug (bool): If <code>True</code>, emit debug logging for each band.\n    mission (str | None): Mission slug, used to determine resampling.\n    downsample_to_landsat_res (bool): If <code>True</code> and mission is\n        Sentinel-2, resample to Landsat resolution.\n    target_resolution (float): Target resolution used when resampling.</p>\n\n<p>Returns:\n    list[tuple[int, np.ndarray, Affine, CRS]]: Tuples containing the\n    one-based band index, data array, transform, and CRS for each band.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">pystac</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">Item</span>,</span><span class=\"param\">\t<span class=\"n\">bands</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">to_disk</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">data_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mission</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">downsample_to_landsat_res</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">target_resolution</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">30</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">.</span><span class=\"n\">Affine</span><span class=\"p\">,</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">crs</span><span class=\"o\">.</span><span class=\"n\">CRS</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.satellite_query.find_satellite_coverage", "modulename": "swmaps.core.satellite_query", "qualname": "find_satellite_coverage", "kind": "function", "doc": "<p>Annotate salinity observations with missions that have nearby imagery.\n   Rows within the same spatiotemporal cluster share the same <code>covered_by</code> result.</p>\n\n<p>Args:\n    df (pandas.DataFrame): Observation table containing <code>latitude</code>,\n        <code>longitude</code>, and <code>date</code> columns.\n    missions (list[str]): Mission slugs to consider.\n    buffer_km (float): Spatial buffer radius around each observation.\n    days_before (int): Days before observation date to include in query.\n    days_after (int): Days after observation date to include in query.\n    temporal_granularity (str): Pandas period alias for time binning (\"M\", \"Q\", \"Y\").</p>\n\n<p>Returns:\n    pandas.DataFrame: Input frame with an added <code>covered_by</code> column\n    listing missions that provide imagery.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">missions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;sentinel-2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;landsat-5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;landsat-7&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">buffer_km</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">days_before</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>,</span><span class=\"param\">\t<span class=\"n\">days_after</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>,</span><span class=\"param\">\t<span class=\"n\">temporal_granularity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.satellite_query.download_matching_images", "modulename": "swmaps.core.satellite_query", "qualname": "download_matching_images", "kind": "function", "doc": "<p>Download imagery for each observation's matched missions.\n   Deduplicates downloads by checking if a lat/lon + temporal cluster\n   is already covered by a previously downloaded STAC item.</p>\n\n<p>Args:\n    df (pandas.DataFrame): Observation table with <code>covered_by</code> details.\n    missions (list[str]): Mission slugs considered for download.\n    buffer_km (float): Buffer radius to define the query bounding box.\n    output_dir (str | Path | None): Destination directory for downloads.\n    days_before (int): Days before observation date to include in query.\n    days_after (int): Days after observation date to include in query.</p>\n\n<p>Returns:\n    pandas.DataFrame: DataFrame with an additional <code>downloaded_files</code>\n    column listing downloaded multiband rasters per observation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">missions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;sentinel-2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;landsat-5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;landsat-7&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">buffer_km</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">days_before</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>,</span><span class=\"param\">\t<span class=\"n\">days_after</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">7</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.water_trend", "modulename": "swmaps.core.water_trend", "kind": "module", "doc": "<p>Utilities for modelling long\u2011term water\u2011cover trends.</p>\n"}, {"fullname": "swmaps.core.water_trend.load_wet_year", "modulename": "swmaps.core.water_trend", "qualname": "load_wet_year", "kind": "function", "doc": "<p>Load monthly water masks and convert to yearly wet fraction.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>mask_glob:\n    Glob pattern or list of files for monthly binary masks. Files must be\n    readable by <code>xarray.open_mfdataset()</code> with <code>engine='rasterio'</code> and\n    contain a <code>time</code> dimension.\nchunks: dict, optional\n    Dask chunk sizes to apply when reading each raster. Pass a mapping\n    like <code>{\"x\": 512, \"y\": 512}</code> to enable lazy loading and progress\n    reporting during downstream computations.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>xr.DataArray\n    DataArray of yearly water fraction with dimensions (time, y, x).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">chunks</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.water_trend.theil_sen_slope", "modulename": "swmaps.core.water_trend", "qualname": "theil_sen_slope", "kind": "function", "doc": "<p>Return the Theil\u2013Sen slope for a 1\u2011D array of observations.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ts : numpy.ndarray\n    One-dimensional time series values ordered chronologically.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>numpy.float32\n    Median pairwise slope; <code>NaN</code> when the series is constant or empty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ts</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.water_trend.mk_p", "modulename": "swmaps.core.water_trend", "qualname": "mk_p", "kind": "function", "doc": "<p>Compute the Mann\u2011Kendall p\u2011value for a time series.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ts : numpy.ndarray\n    Observed values ordered by time.\nyears : numpy.ndarray\n    Numeric representation of time used to evaluate the trend statistic.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>numpy.float32\n    Two-sided p-value indicating the likelihood of the monotonic trend.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ts</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">years</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.water_trend.pixel_trend", "modulename": "swmaps.core.water_trend", "qualname": "pixel_trend", "kind": "function", "doc": "<p>Calculate per\u2011pixel Theil\u2013Sen slope and MK p\u2011value.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>wet_year : xr.DataArray\n    Yearly fraction of wet months with dimensions <code>(time, y, x)</code>.\nprogress : bool, optional\n    If <code>True</code>, display a progress bar while computing the trend.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tuple[xr.DataArray, xr.DataArray]\n    Pair of arrays containing the Theil\u2013Sen slope and Mann\u2013Kendall\n    p-values for each pixel.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wet_year</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">progress</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">,</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.water_trend.plot_trend_heatmap", "modulename": "swmaps.core.water_trend", "qualname": "plot_trend_heatmap", "kind": "function", "doc": "<p>Plot a heatmap of water trend with significance mask.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>slope : xr.DataArray\n    Theil\u2013Sen slope values computed by <code>pixel_trend()</code>.\nsignif : xr.DataArray\n    Boolean mask marking statistically significant pixels.\nvmin, vmax : float, optional\n    Symmetric limits applied to the diverging colour map.\ntitle : str, optional\n    Title to display above the plot.\nax : matplotlib.axes.Axes, optional\n    Existing axes to draw on; one is created when omitted.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>matplotlib.axes.Axes\n    Axes containing the rendered heatmap for further customisation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">signif</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">vmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">vmax</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "swmaps.core.water_trend.save_trend_results", "modulename": "swmaps.core.water_trend", "qualname": "save_trend_results", "kind": "function", "doc": "<p>Save slope and p-value arrays to GeoTIFF and NumPy files.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>slope, pval : xr.DataArray\n    Arrays returned by <code>pixel_trend()</code>.\noutput_stem : str or Path\n    Path stem for output files (without extension). <code>_slope</code> and\n    <code>_pval</code> plus the extensions <code>.tif</code> and <code>.npy</code> will be appended.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tuple[Path, Path]\n    Paths to the generated GeoTIFF files for <code>slope</code> and <code>pval</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">pval</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span>,</span><span class=\"param\">\t<span class=\"n\">output_stem</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();